# Constants
import numpy as np
import torch

NUM_PLAYER_FEATURES = 18
NUM_OPP_META_FEATURES = 12

PREVIOUS_SEASONS_OUTPUT_N = 32
ONE_SEASON_OUTPUT_N = 32

PLAYER_MODEL_OUTPUT_N = 64

FINAL_LAYER_INPUT_N = 94
SINGLE_TEAM_FINAL_OUTPUT_N = 64

MODEL_OPPONENT_STATS_MEANS = torch.tensor(np.array([13.0604, 3.1462, 25.4623, 6.9134, 105.2187, 10.2970, 0.4896, 0.0587, 0.2922, 0.0919]),
                                          dtype=torch.float32).to('cuda')
MODEL_OPPONENT_STATS_STDS = torch.tensor(np.array([2.0517, 0.7671, 4.3474, 1.6937, 12.7862, 2.5155, 0.0621, 0.0142, 0.0574, 0.0252]),
                                         dtype=torch.float32).to('cuda')

SINGLE_GAME_EVERYTHING_MEANS = torch.tensor(np.array(
    [1.002763, -0.073605, -0.031168, 0.380832, 0.150328, 0.414940, -0.067135, 0.404309, 0.097056, 0.285903, 0.111799, 0.605089, 0.155322, -0.005769,
     -0.001379, -0.005725, -0.001592, 0.013788, 0.000309, 0.016472, 0.000743, -0.033799, -0.021663, 0.008192, -0.000872, 0.002587, 0.005348, 0.005827,
     0.004566, -0.000986, 0.002562, -0.002480, 0.002668, 0.006756, 0.007745, 0.021221, 0.007429, -0.010282, 0.001426, -0.003584, 0.002508, 0.015349,
     0.006476, 0.017410, 0.006108, -0.018806, -0.007348, -0.013128, 0.001495, -0.009819, 0.000150, -0.003857, -0.000574, 0.006463, 0.004073, 0.007002,
     0.002729, -0.016052, -0.006511, -0.012006, 0.011749, -0.030537, -0.010783, -0.057329, -0.015135, 0.037105, 0.008406, 0.052949, 0.011505,
     -0.073793, -0.045537, 0.023259, 0.017637, -0.038385, -0.014633, -0.070438, -0.020027, 0.047599, 0.007966, 0.067447, 0.010820, -0.102997,
     -0.065184, 0.020500, 0.004061, 0.010330, 0.001542, 0.015432, 0.005710, -0.001430, -0.002400, -0.005403, -0.001265, 0.033257, 0.017028, -0.013961,
     0.003359, 0.011558, 0.001272, 0.017852, 0.005395, -0.004854, -0.004154, -0.009601, -0.002824, 0.038007, 0.019379, -0.022651, 0.001823, 0.008918,
     0.004285, 0.027857, 0.005992, -0.006864, -0.001318, -0.012484, -0.003543, 0.015357, 0.009129, -0.023694, 0.006058, -0.006688, -0.002239,
     -0.010816, -0.003832, 0.004151, 0.001099, 0.007137, 0.002566, -0.012950, -0.006194, 0.011084, 0.011527, -0.004690, 0.003045, 0.000445, 0.003561,
     0.014906, 0.007016, 0.017043, 0.006758, -0.015725, -0.005372, 0.039651, -0.000157, 0.004820, 0.001366, 0.008528, 0.003344, -0.002685, -0.000932,
     -0.003853, -0.001065, 0.007468, 0.006178, 0.002798, 0.008522, 0.003572, 0.000172, 0.007603, -0.000510, -0.003265, -0.002466, -0.004383,
     -0.001659, 0.006137, 0.002202, -0.017059, -0.004575, 0.022788, -0.000437, 0.013312, -0.001295, -0.013944, -0.009499, -0.013455, -0.007952,
     0.020208, 0.006825, -0.011181, -0.009408, 0.013376, -0.000034, 0.021186, -0.001506, -0.019008, -0.007108, -0.025140, -0.009963, 0.035275,
     0.015997, -0.005082, 0.016155, -0.012452, 0.001456, -0.006611, 0.004176, 0.025144, 0.009053, 0.028757, 0.010031, -0.021830, -0.009102, 0.003592,
     0.041647, -0.002591, -0.001690, 0.016734, 0.006307, 0.017062, -0.003383, 0.016475, 0.003709, 0.013296, 0.005056, 0.033483]),
    dtype=torch.float32).to('cuda')

SINGLE_GAME_EVERYTHING_STDS = torch.tensor(np.array(
    [8.051148, 11.155355, 11.412022, 11.343146, 11.430235, 11.425892, 11.393932, 11.593415, 11.487333, 12.308952, 11.652299, 11.496540, 0.362212,
     0.551170, 0.550837, 0.554803, 0.552836, 0.562035, 0.552368, 0.566637, 0.552815, 0.590089, 0.565379, 0.543317, 0.547939, 0.743401, 0.736779,
     0.637877, 0.797368, 0.673589, 0.770387, 0.673524, 0.708889, 0.644748, 0.656976, 1.243363, 0.574805, 0.792919, 0.789354, 0.805117, 0.792807,
     0.811764, 0.794966, 0.820801, 0.795636, 0.863398, 0.817759, 0.772160, 0.568741, 0.807472, 0.800888, 0.813938, 0.800805, 0.830851, 0.805155,
     0.837805, 0.804491, 0.868114, 0.824079, 0.770924, 0.586300, 0.786007, 0.781088, 0.802665, 0.790613, 0.808859, 0.795568, 0.827447, 0.798606,
     0.887893, 0.819378, 0.780086, 0.586757, 0.799276, 0.793168, 0.815661, 0.799162, 0.830229, 0.809465, 0.849086, 0.811975, 0.903462, 0.830793,
     0.783607, 0.576667, 0.808240, 0.806552, 0.807687, 0.810856, 0.827046, 0.810935, 0.830916, 0.810011, 0.879491, 0.840937, 0.748253, 0.575334,
     0.814787, 0.809944, 0.812679, 0.813433, 0.836364, 0.812570, 0.839033, 0.811312, 0.879432, 0.841164, 0.751647, 0.573865, 0.795800, 0.790701,
     0.803576, 0.795819, 0.812067, 0.792455, 0.817033, 0.792835, 0.842204, 0.808240, 0.765469, 0.574794, 0.805602, 0.800018, 0.810210, 0.802702,
     0.827532, 0.804010, 0.833309, 0.802836, 0.857089, 0.819673, 0.781281, 0.584342, 0.773680, 0.774991, 0.786616, 0.782193, 0.783922, 0.781603,
     0.793875, 0.781269, 0.846527, 0.805710, 0.806478, 0.567632, 0.806668, 0.801989, 0.806502, 0.801656, 0.825091, 0.799907, 0.829885, 0.800297,
     0.855829, 0.821657, 0.777254, 0.585075, 0.828088, 0.816571, 0.823860, 0.819465, 0.851925, 0.818685, 0.852357, 0.822377, 0.873961, 0.839437,
     0.786770, 0.562428, 0.830849, 0.820874, 0.825348, 0.825316, 0.853353, 0.823703, 0.856786, 0.824485, 0.873737, 0.836402, 0.784042, 0.562249,
     0.815008, 0.815828, 0.816709, 0.816373, 0.836405, 0.816886, 0.840538, 0.817871, 0.864529, 0.831653, 0.792451, 0.581800, 0.792049, 0.790181,
     0.803564, 0.795884, 0.809876, 0.797114, 0.819580, 0.798120, 0.869998, 0.821493, 0.772759, 0.572630, 0.789905, 0.796231, 0.800130, 0.796656,
     0.809963, 0.795000, 0.819813, 0.798593, 0.863745, 0.818135, 0.790650]), dtype=torch.float32).to('cuda')


# Dictionary Accessors

def GetHomeTeam(game_dict):
    return game_dict['home_team']


def GetAwayTeam(game_dict):
    return game_dict['away_team']


def GetGameMonthDay(game_dict):
    month = game_dict['game_month']
    day = game_dict['game_day']
    return month, day


def GetDefensiveStatsArray(team_dict):
    return [
        team_dict['OTOVm'],
        team_dict['OTOVo'],
        team_dict['OORBm'],
        team_dict['OORBo'],
        team_dict['OORTGm'],
        team_dict['OORTGo'],
        team_dict['OEFGPm'],
        team_dict['OEFGPo'],
        team_dict['OFTRm'],
        team_dict['OFTRo'],
    ]


def GetTeamWins(team_dict):
    return team_dict['wins']


def GetTeamLosses(team_dict):
    return team_dict['losses']


def GetTeamConferenceSeed(team_dict):
    return team_dict['conference_seed']


def GetTeamConference(team_dict):
    return team_dict['conference']


def GetTeamAdjGameTime(team_dict):
    return team_dict['adjusted_game_time']


def GetRoster(team_dict):
    return team_dict['roster']


def GetPreviousSeasons(player_dict):
    return player_dict['prev_year_tensors']


def GetThisSeasonTensor(player_dict):
    return player_dict['this_year_tensor']


def GetIsDummy(player_dict):
    return player_dict['is_dummy']
